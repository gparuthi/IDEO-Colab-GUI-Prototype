{"version":3,"sources":["../src/kalman.js"],"names":["KalmanFilter","R","Q","A","B","C","cov","NaN","x","z","u","isNaN","predX","predCov","K","noise"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;IAUqBA,Y;;AAEnB;;;;;;;;;AASA,0BAAsD;AAAA,mFAAJ,EAAI;AAAA,sBAAzCC,CAAyC;AAAA,QAAzCA,CAAyC,0BAArC,CAAqC;AAAA,sBAAlCC,CAAkC;AAAA,QAAlCA,CAAkC,0BAA9B,CAA8B;AAAA,sBAA3BC,CAA2B;AAAA,QAA3BA,CAA2B,0BAAvB,CAAuB;AAAA,sBAApBC,CAAoB;AAAA,QAApBA,CAAoB,0BAAhB,CAAgB;AAAA,sBAAbC,CAAa;AAAA,QAAbA,CAAa,0BAAT,CAAS;;AAAA;;AAEpD,SAAKJ,CAAL,GAASA,CAAT,CAFoD,CAExC;AACZ,SAAKC,CAAL,GAASA,CAAT,CAHoD,CAGxC;;AAEZ,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKE,CAAL,GAASA,CAAT;AACA,SAAKD,CAAL,GAASA,CAAT;AACA,SAAKE,GAAL,GAAWC,GAAX;AACA,SAAKC,CAAL,GAASD,GAAT,CAToD,CAStC;AACf;;AAED;;;;;;;;;;2BAMOE,C,EAAU;AAAA,UAAPC,CAAO,uEAAH,CAAG;;;AAEf,UAAIC,MAAM,KAAKH,CAAX,CAAJ,EAAmB;AACjB,aAAKA,CAAL,GAAU,IAAI,KAAKH,CAAV,GAAeI,CAAxB;AACA,aAAKH,GAAL,GAAY,IAAI,KAAKD,CAAV,GAAe,KAAKH,CAApB,IAAyB,IAAI,KAAKG,CAAlC,CAAX;AACD,OAHD,MAIK;;AAEH;AACA,YAAMO,QAAS,KAAKT,CAAL,GAAS,KAAKK,CAAf,GAAqB,KAAKJ,CAAL,GAASM,CAA5C;AACA,YAAMG,UAAY,KAAKV,CAAL,GAAS,KAAKG,GAAf,GAAsB,KAAKH,CAA5B,GAAiC,KAAKF,CAAtD;;AAEA;AACA,YAAMa,IAAID,UAAU,KAAKR,CAAf,IAAoB,KAAM,KAAKA,CAAL,GAASQ,OAAT,GAAmB,KAAKR,CAAzB,GAA8B,KAAKH,CAAxC,CAApB,CAAV;;AAEA;AACA,aAAKM,CAAL,GAASI,QAAQE,KAAKL,IAAK,KAAKJ,CAAL,GAASO,KAAnB,CAAjB;AACA,aAAKN,GAAL,GAAWO,UAAWC,IAAI,KAAKT,CAAT,GAAaQ,OAAnC;AACD;;AAED,aAAO,KAAKL,CAAZ;AACD;;AAED;;;;;;;sCAIkB;AAChB,aAAO,KAAKA,CAAZ;AACD;;AAED;;;;;;;wCAIoBO,K,EAAO;AACzB,WAAKb,CAAL,GAASa,KAAT;AACD;;AAED;;;;;;;oCAIgBA,K,EAAO;AACrB,WAAKd,CAAL,GAASc,KAAT;AACD;;;;;;kBA1EkBf,Y","file":"kalman.js","sourcesContent":["/**\n* KalmanFilter\n* @class\n* @author Wouter Bulten\n* @see {@link http://github.com/wouterbulten/kalmanjs}\n* @version Version: 1.0.0-beta\n* @copyright Copyright 2015 Wouter Bulten\n* @license GNU LESSER GENERAL PUBLIC LICENSE v3\n* @preserve\n*/\nexport default class KalmanFilter {\n\n  /**\n  * Create 1-dimensional kalman filter\n  * @param  {Number} options.R Process noise\n  * @param  {Number} options.Q Measurement noise\n  * @param  {Number} options.A State vector\n  * @param  {Number} options.B Control vector\n  * @param  {Number} options.C Measurement vector\n  * @return {KalmanFilter}\n  */\n  constructor({R = 1, Q = 1, A = 1, B = 0, C = 1} = {}) {\n\n    this.R = R; // noise power desirable\n    this.Q = Q; // noise power estimated\n\n    this.A = A;\n    this.C = C;\n    this.B = B;\n    this.cov = NaN;\n    this.x = NaN; // estimated signal without noise\n  }\n\n  /**\n  * Filter a new value\n  * @param  {Number} z Measurement\n  * @param  {Number} u Control\n  * @return {Number}\n  */\n  filter(z, u = 0) {\n\n    if (isNaN(this.x)) {\n      this.x = (1 / this.C) * z;\n      this.cov = (1 / this.C) * this.Q * (1 / this.C);\n    }\n    else {\n\n      // Compute prediction\n      const predX = (this.A * this.x) + (this.B * u);\n      const predCov = ((this.A * this.cov) * this.A) + this.R;\n\n      // Kalman gain\n      const K = predCov * this.C * (1 / ((this.C * predCov * this.C) + this.Q));\n\n      // Correction\n      this.x = predX + K * (z - (this.C * predX));\n      this.cov = predCov - (K * this.C * predCov);\n    }\n\n    return this.x;\n  }\n\n  /**\n  * Return the last filtered measurement\n  * @return {Number}\n  */\n  lastMeasurement() {\n    return this.x;\n  }\n\n  /**\n  * Set measurement noise Q\n  * @param {Number} noise\n  */\n  setMeasurementNoise(noise) {\n    this.Q = noise;\n  }\n\n  /**\n  * Set the process noise R\n  * @param {Number} noise\n  */\n  setProcessNoise(noise) {\n    this.R = noise;\n  }\n}\n"]}